<project name="jsr352_tck" default="run" basedir="">

	<taskdef resource="testngtasks" classpath=".\lib\testng-@version.org.testng.testng@.jar"/>
	
	<description>
		JSR 352 TCK
	</description>
	
	<!-- Modify this property to contain the location of the extracted TCK source -->
	<property name="src" location=""/>
	
	<!-- This location will contain the TCK class files after running the compile target -->
	<property name="build" location="build"/>
	
	<!-- Directory which will contain the TestNG report after running the TCK -->
	<property name="results" location="results"/>

    <!-- Override with value "EE" to run TestNG EE tests. -->
    <property name="tck.type" value="SE" />

    <target name="compile" depends="init" description="Compile the JSR352 TCK source code" >
		<mkdir dir="${build}"/>
		
		<!-- compile test artifacts -->
		<javac srcdir="${src}" destdir="${build}">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${batch.impl.classes}"/>
				<fileset dir="artifacts">
					<include name="**/com.ibm.jbatch.tck.spi-@project.version@.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="init">
		 <loadproperties srcFile="jsr352-tck.properties"/>
	</target>

    <target name="sigtest" depends="init" description="Run SigTest">
        <condition property="javax.batch.jar.available">
            <and>
                <isset property="javax.batch.jar"/>
                <available classname="javax.batch.operations.JobOperator" classpath="${javax.batch.jar}"/>
            </and>
        </condition>
        <fail if="javax.batch.jar.available" message="To run SigTest the property 'javax.batch.jar' must be set in 'jsr352-tck.properties' to point to your JSR-352 api jar."/>

        <path id="sigtest.dependencies">
            <pathelement location="${javax.batch.jar}"/>
            <pathelement location="./lib/javax.inject-@version.javax.inject.javax.inject@"/>
            <pathelement location="./lib/cdi-api-@version.javax.enterprise.cdi-api@"/>
            <pathelement location="./lib/sigtestdev-@version.net.java.sigtest.sigtestdev@"/>
        </path>

        <!-- Define the signature-test task. -->
        <taskdef name="test-signature" classname="com.sun.tdk.signaturetest.ant.ATest" classpath="./lib/sigtestdev-@version.net.java.sigtest.sigtestdev@"/>
    </target>

	<target name="clean">
	    <delete dir="${build}"/>
		<delete dir="${results}"/>
	</target>

    <target name="sigtest6" depends="sigtest" if="can.run.sigtest.6">
        <condition property="can.run.sigtest6">
            <and>
                <isset property="sigtest.java6.home"/>
                <available classname="java.net.CookieStore" classpath="${sigtest.java6.home}/jre/lib/rt.jar" />
            </and>
        </condition>
        <fail if="can.run.sigtest6" message="To run SigTest against JDK6 the property 'sigtest.java6.home' must be set in 'jsr352-tck.properties' to point to the root of a JDK6 install."/>
        <test-signature failonerror="true" filename="./artifacts/jsr352-api-sigtest-java6.sig">
            <package name="javax.batch"/>
            <classpath refId="sigtest.dependencies"/>
            <classpath>
                <pathelement location="${sigtest.java6.home}/jre/lib/rt.jar"/>
            </classpath>
        </test-signature>
    </target>

    <target name="sigtest7" depends="sigtest" if="can.run.sigtest.7">
        <condition property="can.run.sigtest7">
            <and>
                <isset property="sigtest.java7.home"/>
                <available classname="java.net.SocketOption" classpath="${sigtest.java7.home}/jre/lib/rt.jar" />
            </and>
        </condition>
        <fail if="can.run.sigtest7" message="To run SigTest against JDK7 the property 'sigtest.java7.home' must be set in 'jsr352-tck.properties' to point to the root of a JDK7 install."/>
        <test-signature failonerror="true" filename="./artifacts/jsr352-api-sigtest-java7.sig">
            <package name="javax.batch"/>
            <classpath refId="sigtest.dependencies"/>
            <classpath>
                <pathelement location="${sigtest.java7.home}/jre/lib/rt.jar"/>
            </classpath>
        </test-signature>
    </target>

    <target name="sigtest8" depends="sigtest" if="can.run.sigtest.8">
        <condition property="can.run.sigtest8">
            <and>
                <isset property="sigtest.java8.home"/>
                <available classname="java.time.Instant" classpath="${sigtest.java8.home}/jre/lib/rt.jar" />
            </and>
        </condition>
        <fail if="can.run.sigtest8" message="To run SigTest against JDK8 the property 'sigtest.java8.home' must be set in 'jsr352-tck.properties' to point to the root of a JDK8 install."/>
        <test-signature failonerror="true" filename="./artifacts/jsr352-api-sigtest-java8.sig">
            <package name="javax.batch"/>
            <classpath refId="sigtest.dependencies"/>
            <classpath>
                <pathelement location="${sigtest.java8.home}/jre/lib/rt.jar"/>
            </classpath>
        </test-signature>
    </target>

	<target name="run" depends="init" description="Runs the JSR352 TCK suite" >
        <path id="jsr352.tck.classpath">
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="artifacts">
                <include name="**/com.ibm.jbatch.tck.spi-@project.version@.jar"/>
                <include name="**/com.ibm.jbatch.tck-@project.version@.jar"/>
            </fileset>
            <pathelement path="${batch.impl.classes}"/>
        </path>
	
		<testng mode="testng" classpathref="jsr352.tck.classpath" dumpCommand="true" workingDir="." haltonfailure="true" outputdir="${results}">
			
			<xmlfileset dir="." includes="artifacts/jsr352-tck-impl-${tck.type}-suite.xml"/>
			
			<!-- user specified JVM arguments -->
			<jvmarg line="${jvm.options}"/>
			
			<!-- TCK test sleep property definitions -->
			<jvmarg value="-Dtck.execution.waiter.timeout=900000"/>
			<jvmarg value="-DExecutionTests.testInvokeJobWithUserStop.sleep=${ExecutionTests.testInvokeJobWithUserStop.sleep}"/>
			<jvmarg value="-DJobOperatorTests.testInvokeJobWithUserStop.sleep=${JobOperatorTests.testInvokeJobWithUserStop.sleep}"/>
			<jvmarg value="-DJobOperatorTests.testJobOperatorGetRunningJobExecutions.sleep=${JobOperatorTests.testJobOperatorGetRunningJobExecutions.sleep}"/>
			<jvmarg value="-DParallelExecutionTests.testStopRunningPartitionedStep.sleep=${ParallelExecutionTests.testStopRunningPartitionedStep.sleep}"/>
			<jvmarg value="-DParallelExecutionTests.testStopRestartRunningPartitionedStep.sleep=${ParallelExecutionTests.testStopRestartRunningPartitionedStep.sleep}"/>
			<jvmarg value="-DStopOrFailOnExitStatusWithRestartTests.testInvokeJobWithUserStop.sleep=${StopOrFailOnExitStatusWithRestartTests.testInvokeJobWithUserStop.sleep}"/>
			<jvmarg value="-DParallelExecutionTests.testInvokeJobWithOnePartitionedStepExitStatus.sleep=${ParallelExecutionTests.testInvokeJobWithOnePartitionedStepExitStatus.sleep}"/>
			<jvmarg value="-DJobOperatorTests.testJobOperatorGetRunningJobExecutions.app.timeinterval=${JobOperatorTests.testJobOperatorGetRunningJobExecutions.app.timeinterval}"/>
			<jvmarg value="-DJobOperatorTests.testJobOperatorGetRunningJobInstancesException.app.timeinterval=${JobOperatorTests.testJobOperatorGetRunningJobInstancesException.app.timeinterval}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranNoExceptions.sleep=${TransactionTests.testGlobalTranNoExceptions.sleep}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranForcedExceptionWithRollback.sleep=${TransactionTests.testGlobalTranForcedExceptionWithRollback.sleep}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranForcedExceptionCheckpointRestart.sleep=${TransactionTests.testGlobalTranForcedExceptionCheckpointRestart.sleep}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranNoDelayLongTimeout.sleep=${TransactionTests.testGlobalTranNoDelayLongTimeout.sleep}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.1=${TransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.1}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.2=${TransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.2}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutSteps.sleep=${TransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutSteps.sleep}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutStepsCustomCheckpointAlgorithm.sleep=${TransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutStepsCustomCheckpointAlgorithm.sleep}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.1=${TransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.1}"/>
			<jvmarg value="-DTransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.2=${TransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.2}"/>
			<jvmarg value="-DChunkTests.testChunkTimeBased10Seconds.sleep=${ChunkTests.testChunkTimeBased10Seconds.sleep}"/>
			<jvmarg value="-DChunkTests.testChunkRestartTimeBasedCheckpoint.sleep=${ChunkTests.testChunkRestartTimeBasedCheckpoint.sleep}"/>
			<jvmarg value="-DChunkTests.testChunkTimeBasedTimeLimit0.sleep=${ChunkTests.testChunkTimeBasedTimeLimit0.sleep}"/>
			<jvmarg value="-DChunkTests.testChunkRestartTimeBasedDefaultCheckpoint.sleep=${ChunkTests.testChunkRestartTimeBasedDefaultCheckpoint.sleep}"/>
		</testng>
	</target>

</project>